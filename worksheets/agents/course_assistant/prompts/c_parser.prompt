<|startofinstruction|>
You are a semantic parser. Generate a query for a courses database with the following signatures:

CREATE TYPE general_requirement AS ENUM (
    'WAY-A-II', 'WAY-AQR', 'WAY-CE', 'WAY-EDP', 'WAY-ER', 'WAY-FR', 'WAY-SI', 'WAY-SMA',
    'Language', 'Writing 1', 'Writing 2', 'Writing SLE', 'GER:DB-Hum', 'GER:DB-Math', 'GER:DB-SocSci',
    'GER:DB-EngrAppSci', 'GER:DB-NatSci', 'GER:EC-EthicReas', 'GER:EC-GlobalCom', 'GER:EC-AmerCul', 'GER:EC-Gender',
    'IHUM1', 'IHUM2', 'IHUM3');

CREATE TYPE foundation AS ENUM ('logic_automata_and_complexity', 'probability', 'algorithmic_analysis', 'computer_organization_and_systems', 'principles_of_computer_systems');

CREATE TYPE breadth AS ENUM ('formal_foundations', 'learning_and_modeling', 'systems', 'people_and_society');

CREATE TABLE courses (
    course_id INT PRIMARY KEY,
    max_units INT,
    title TEXT,
    grading TEXT, -- values: 'Satisfactory/No Credit', 'Letter or Credit/No Credit'.
    course_codes TEXT[],
    general_requirements general_requirement[],
    min_units INT,
    description TEXT,
    average_hours_spent FLOAT, -- time a student spends on the course
    foundations_requirement foundation[],
    significant_implementation_requirement BOOLEAN,
    breadth_requirement breadth[],
    prerequisite_course_codes TEXT[],
);

Do not generate fields beyond the given fields. The `answer` function can be used on FREE_TEXT fields.

Here is some important information regarding the courses domain:
- course_codes is the abbreviated department name followed by the course number (e.g., 'CS 161'). Some courses can be listed under multiple departments and numbers, and thus have multiple course codes.
- A course is considered "easy" if it has at most 10 hours of average_hours_spent.

Below are some examples of using the `answer` and `summary` function.

{# Significant Implementation and Average Hours Spent Example #}
User: I am a sophomore studying computer science. How can I complete the significant implementation requirement as quickly as possible?
Target: SELECT title, course_codes, description, average_hours_spent FROM courses WHERE significant_implementation_requirement = TRUE ORDER BY average_hours_spent;
--
{# Meaning of "course number" When Specified by User #}
User: Show me a computer systems course numbered above 200.
Target: SELECT title, course_codes FROM courses WHERE EXISTS (SELECT 1 FROM unnest(courses.course_codes) as course_code(course_code) WHERE course_code LIKE 'CS %' AND substring(course_code FROM 'CS ([0-9]+)')::int > 200) AND answer(description, 'is this a computer systems course?') = 'Yes' LIMIT 1;
--
{# Requirement Example #}
User: What courses fulfill the computer organization and systems requirement again?
Target: SELECT title, course_codes, description FROM courses WHERE 'computer_organization_and_systems'::foundation = ANY(foundations_requirement);
--
{# User Asks for More Courses Example #}
User: Show me some NLP courses.
Target: SELECT title, course_codes, description FROM courses WHERE answer(description, 'is this an NLP course?') = 'Yes';
Agent: Here are some courses focused on NLP: CS 124: From Languages to Information, CS 224U: Natural Language Understanding, CS 224N: Natural Language Processing with Deep Learning, CS 224C: NLP for Computational Social Science, and CS 324H: History of Natural Language Processing.
User: Please show me some more.
Target: SELECT title, course_codes, description FROM courses WHERE answer(description, 'is this an NLP course?') = 'Yes' OFFSET 5;
<|endofinstruction|>

<|startofinput|>
{% for dlg_turn in dlg[:-1] %}
{% if dlg_turn.genie_utterance is not none %}
User: {{ dlg_turn.user_utterance }}
Target: {{ dlg_turn.user_target }}
Agent: {{ dlg_turn.agent_utterance }}
{% endif %}
{% endfor %}
User: {{ query }}
Target:
<|endofinput|>