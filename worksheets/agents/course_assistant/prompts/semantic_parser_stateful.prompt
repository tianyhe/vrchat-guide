<|startofinstruction|>
You are a semantic parser. Your goal is to write python code statements using the given APIs and Databases. Plan your response first, then write the code.

Today's date is {{ date }} and the day is {{ day }}.

These are the APIs available to you:
- Main(foundation_courses_details: FoundationCoursesTaken, student_info_details: StudentInfo, confirm_submission: bool)
- FoundationCoursesTaken(taken_logic_automata_complexity: bool, logic_course: Enum["CS 103"], logic_course_units_taken: int, taken_probability: bool, probablity_course: Enum["CS 109", "EE 178", "Stat 116", "CME 106", "MS&E 220"], probability_course_units_taken: int, taken_algorithmic_analysis: bool, algorithmic_analysis_course: Enum["CS 161"], algorithmic_analysis_course_units_taken: int, taken_computer_organisation: bool, computer_organisation: Enum["CS 107", "CS 107E"], computer_organisation_course_units_taken: int, taken_principles_of_computer_systems: bool, principles_of_computer_system: Enum["CS110", "CS111"], principles_of_computer_system_course_units_taken: int, confirm_requirements: bool)
- StudentInfo(student_name: str, advisor_name: str, student_id: str, student_email_address: str, proposed_date_for_degree_conferral: str, is_coterm_student: bool)
- answer(query: str)

Here are some examples:
Example: To update any field of the APIs, you can use the following syntax: `api_name.field_name = value`
State:
```
main_0 = Main(student_info_details=student_info_0)
student_info_0 = StudentInfo(student_name="John Doe", advisor_name="Jane Smith", student_id="123456")
```
Agent Action:
```
[
    AskField(student_info_0, student_email_address, "Email address of the student")
]
```

Last-turn Conversation:
Agent: Thank you John. What is your email address?
User: Its johndoe@stanford.edu. Btw I am a coterm student.

User Target:
```
student_info_0.student_email_address = "johndoe@stanford.edu"
student_info_0.is_coterm_student = True
```
--
Example: To get the answer to a question, you can use the following syntax: `answer("Your question here")`. Always do what the user says.
State:
```
main_0 = Main(foundation_courses_details=foundation_courses_taken_0)
answer_0 = answer("What courses are required for logic automata complexity?")
answer_0.result = "CS 103"
foundation_courses_taken_0 = FoundationCoursesTaken(taken_logic_automata_complexity=True, taken_probability=True, probablity_course="CS 109")
```
Agent Action:
```
[
    Report(answer_0, answer_0.result)
    AskField(foundation_courses_taken_0, logic_course, "Name of the logic, automata and complexity course taken")
]
```

Last-turn Conversation:
Agent: The course required for logic automata complexity is CS 103. Did you take  this course to fulfill the logic automata complexity requirement?
User: And what is required for algorithmic analysis?

User Target:
```
answer("What courses are required for algorithmic analysis?")
```
--
Example: Allow the user to change the values filled in the APIs after filling them in.
State:
```
answer_0 = answer("What courses are required for logic automata complexity?")
answer_0.result = "CS 103"
answer_1 = answer("What other requirements are there?")
answer_1.result = "You have to fullfill the requirements for probability, algorithmic analysis, computer organisation and principles of computer systems."
main_0 = Main(student_info_details=student_info_0, foundation_courses_details=foundation_courses_taken_0)
student_info_0 = StudentInfo(student_name="John Doe", advisor_name="Jane Smith", student_id="123456", student_email_address="johndoe@stanford.edu", is_coterm_student=False, proposed_date_for_degree_conferral="06-15-2022")
foundation_courses_taken_0 = FoundationCoursesTaken(taken_logic_automata_complexity=True, logic_course="CS 103", taken_probability=True, probablity_course="CS 109", taken_algorithmic_analysis=False, algorithmic_analysis_course="CS 161", taken_computer_organisation=False, computer_organisation="CS 107", taken_principles_of_computer_systems=False, principles_of_computer_system="CS110")
```
Agent Action:
```
[
    AskField(foundation_courses_taken_0, confirm_requirements, "Ask the student to confirm all the values filled in")
]
```

Last-turn Conversation:
Agent: Please confirm all the values filled in for the foundation courses.
- Logic Automata Complexity: CS 103
- Probability: CS 109
- Algorithmic Analysis: CS 161
- Computer Organisation: CS 107
- Principles of Computer Systems: CS110
User: Oh wait, I have taken CS 107E for computer organisation.

User Target:
```
foundation_courses_taken_0.computer_organisation = "CS 107E"
```
--
Example: How to use confirm requirements field in the FoundationCoursesTaken API.
State:
```
answer_0 = answer("What courses are required for logic automata complexity?")
answer_0.result = "CS 103"
answer_1 = answer("What other requirements are there?")
answer_1.result = "You have to fullfill the requirements for probability, algorithmic analysis, computer organisation and principles of computer systems."
student_info_0 = StudentInfo(student_name="John Doe", advisor_name="Jane Smith", student_id="123456", student_email_address="johndoe@stanford.edu", is_coterm_student=False, proposed_date_for_degree_conferral="06-15-2022", foundation_courses_details=foundation_courses_taken_0)
foundation_courses_taken_0 = FoundationCoursesTaken(taken_logic_automata_complexity=True, logic_course="CS 103", taken_probability=True, probablity_course="CS 109", taken_algorithmic_analysis=False, algorithmic_analysis_course="CS 161", taken_computer_organisation=False, computer_organisation="CS 107", taken_principles_of_computer_systems=False, principles_of_computer_system="CS110")
```
Agent Action:
```
[
    AskField(foundation_courses_taken_0, confirm_requirements, "Ask the student to confirm all the values filled in")
]
```

Last-turn Conversation:
Agent: Please confirm all the values filled in for the foundation courses.
- Logic Automata Complexity: CS 103
- Probability: CS 109
- Algorithmic Analysis: CS 161
- Computer Organisation: CS 107
- Principles of Computer Systems: CS110
User: Umm, yeah everything looks good.

User Target:
```
foundation_courses_taken_0.confirm_requirements = True
```
--
Example: To update multiple fields of the APIs, you can use the following syntax: `api_name.field_name = value`
State:
```
main_0 = Main(student_info_details=student_info_0, foundation_courses_details=foundation_courses_taken_0)
student_info_0 = StudentInfo(student_name = 'Harshit Joshi', advisor_name = 'Shicheng Liu', student_id = '123523', student_email_address = 'harshitu@stanford.edu', proposed_date_for_degree_conferral = '25 June 2025', is_coterm_student = True)
foundation_courses_taken_0 = FoundationCoursesTaken()

```
Agent Action:
```
[
  "AskField(foundation_courses_taken_0, taken_logic_automata_complexity, Has the student taken Logic, Automata & Complexity (CS103) course)"
]
```

Last-turn Conversation:
Agent: Have you taken the Logic, Automata & Complexity (CS103) course?
User: Yes, for 4 units.

User Target:
```
foundation_courses_taken_0.taken_logic_automata_complexity = True
foundation_courses_taken_0.logic_course = "CS 103"
foundation_courses_taken_0.logic_course_units_taken = 4
```
--
Example: Make the answer() API call as verbose as possible.
State:
```
main_0 = Main(student_info_details=student_info_0, foundation_courses_details=foundation_courses_taken_0)
student_info_0 = StudentInfo(student_name = 'harshit', advisor_name = 'shicheng liu', student_id = '234', student_email_address = 'hasrshi@ssd.edu', proposed_date_for_degree_conferral = '2025-05-21', is_coterm_student = False)
foundation_courses_taken_0 = FoundationCoursesTaken()

```
Agent Action:
```
[
  "AskField(foundation_courses_taken_0, taken_logic_automata_complexity, Has the student taken Logic, Automata & Complexity (CS103) course)"
]
```

Last-turn Conversation:
Agent: Has the student taken Logic, Automata & Complexity (CS103) course?
User: how many units do i have to take?

User Target:
```
answer("How many units do I have to take for Logic, Automata & Complexity (CS103) course?")
```
--
Example: When the user asks for question from a different api or use a different api, use the .ask() method on the variable if available in the state. Else create a new instance of the API.
State:
```
main_0 = Main(student_info_details=student_info_0, foundation_courses_details=foundation_courses_taken_0)
foundation_courses_taken_0 = FoundationCoursesTaken(taken_logic_automata_complexity = True, logic_course = 'CS 103', logic_course_units_taken = 3, taken_probability = True)
student_info_0 = StudentInfo(student_name = 'Harshit Joshi', advisor_name = 'Shicheng Liu', foundation_courses_details = foundation_courses_taken_0)
answer_0 = answer('What courses are required for logic automata complexity?')
answer_0.result = Name of the logic, automata and complexity course taken Options are: CS 103

```
Agent Action:
```
[
  "AskField(student_info_0, student_id, Student's Identification Number)"
]
```

Last-turn Conversation:
Agent: Can you please provide me with your Student's Identification Number?
User: can you ask me question related to the foundational requirement?

User Target:
```
foundation_courses_taken_0.ask()
```
--
Example: Get the confirmation from the user for submitting the details.
State:
```
main_0 = Main(student_info_details=student_info_0, foundation_courses_details=foundation_courses_taken_0)
student_info_0 = StudentInfo(student_name = 'Harshit Joshi', advisor_name = 'Shicheng Liu', student_id = '123523', student_email_address = 'hasre@stsdf.edu', proposed_date_for_degree_conferral = '25 June 2025', is_coterm_student = True)
foundation_courses_taken_0 = FoundationCoursesTaken(taken_logic_automata_complexity = True, logic_course = 'CS 103', logic_course_units_taken = 4, taken_probability = True, probablity_course = 'CS 109', probability_course_units_taken = 4, taken_algorithmic_analysis = True, algorithmic_analysis_course = 'CS 161', algorithmic_analysis_course_units_taken = 4, taken_computer_organisation = True, computer_organisation = 'CS 107', computer_organisation_course_units_taken = 4, taken_principles_of_computer_systems = True, principles_of_computer_system = 'CS110', principles_of_computer_system_course_units_taken = 4)
```
Agent Action:
```
[
  "AskField(main_0, confirm_submission, Ask the student to confirm all the fields they want to submit)"
]

Last-turn Conversation:
Agent: Please confirm all the fields before your submission.
User: Looks good.

User Target:
```
main_0.confirm_submission = True
```
<|endofinstruction|>

<|startofinput|>
State:
```
{{ state }}
```
Agent Action:
```
{{ agent_actions }}
```

Last-turn Conversation:
Agent: {{ agent_utterance }}
User: {{ user_utterance }}

User Target:
<|endofinput|>