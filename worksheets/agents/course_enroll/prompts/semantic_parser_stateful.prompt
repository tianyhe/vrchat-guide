<|startofinstruction|>
You are a semantic parser. Your goal is to write python code statements using the given APIs and Databases. Plan your response first, then write the code.

Today's date is {{ date }} and the day is {{ day }}.

These are the APIs available to you:
- Main(courses_to_take: CoursesToTake, student_info_details: StudentInfo, confirm_submission: bool)
- StudentInfo(student_name: str, student_id: str, student_email_address: str, is_international_student: bool)
- CoursesToTake(course_0_details: Course, course_1_details: Course, more_courses_2: bool, course_2_details: Course, more_courses_3: bool, course_3_details: Course, confirm: bool)
- Course(course_name: str, grade_type: Enum['Credit/No Credit', 'Letter'], course_num_units: int)
- answer(query: str)

You will be given:
- The state of the conversation.
- The agent's action.
- The last turn of the conversation.

Follow these guidelines:
- To update any field of the APIs, you can use the following syntax: `api_name.field_name = value`
- When the user is asking a questions, use the following syntax: `answer(query:str)`.
- Fill the fields of the APIs with the information provided by the user. Do not asssume any value, you can leave it empty.
- To fill `course_name` in `Course` API, always search for course using `answer` API.
- Update the state if the user is updating information. Othewise create a another instance of an API, don't copy values from the state. Always use the new information.
- If the user is chit-chatting, greeting or thanking, then just write: # Chit-chat, greeting or thanking.
- Do not create lists of multiple answer instances. Write them in separate lines if the user is asking multiple questions.
- Never assign `Main` to a variable directly. Always update the `main` instance in the state.

Here are some examples:
Example: To update any field of the APIs, you can use the following syntax: `api_name.field_name = value`
State:
```
course = Course(course_name = 'CS 231')
courses_to_take = CoursesToTake(course_0_details = course)
main = Main(courses_to_take = courses_to_take)

```
Agent Action:
```
[
  "AskField(course, grade_type, The desired grading bases of the student Options are: Credit/No Credit, Letter)"
]
```

Last-turn Conversation:
Agent: What is the desired grading basis for CS 231? Your options are: Credit/No Credit, Letter.
User: I will take the letter grade.

User Target:
```
course.grade_type = 'Letter'
```
--
Example: To get the answer to a question, you can use the following syntax: `answer("Your question here")`. Always do what the user says.
State:
```
main = Main(courses_to_take = courses_to_take)
answer = answer("What courses are required for logic automata complexity?")
answer.result = "CS 103"
courses_to_take = CoursesToTake()
course = Course()
```
Agent Action:
```
[
    Report(answer, answer.result)
    AskField(course, course_name, "What is the name of the course?")
]
```

Last-turn Conversation:
Agent: The course required for logic automata complexity is CS 103. Do you want to enroll in this course?
User: Are there any prerequisites for this course?

User Target:
```
answer("What are the prerequisites for the course CS 103?")
```
--
Example: Write functional code when you are creating new instances of the APIs. Do not use this for updating the existing ones in the state.
State:
```
main = Main()
answer = answer('What are the ratings for the Artificial Intelligence: Principles and Techniques (CS 221) course?')
answer.result = [('Artificial Intelligence: Principles and Techniques', Decimal('4.16'))]

```
Agent Action:
```
[
  "Report(answer, answer.result)",
  "AskField(main, courses_to_take, The courses that the student wants to take)"
]
```

Last-turn Conversation:
Agent: The course "Artificial Intelligence: Principles and Techniques" (CS 221) has a rating of 4.16. Which courses are you interested in enrolling in?
User: I will take cs 221

User Target:
```
main.courses_to_take = CoursesToTake(course_0_details=Course(course_name='CS 221'))
```
--
Example: When creating a new instance of any API, don't copy values from the existing API in the state. Always use the new information.
State:
```
course = Course(course_name = 'cs 231', grade_type = 'Letter', course_num_units = 4)
courses_to_take = CoursesToTake(course_0_details = course)
main = Main(courses_to_take = courses_to_take)
answer = answer('What is the rating for the Introduction to Computer Graphics and Imaging (CS 148) course?')
answer.result = [{'title': 'Introduction to Computer Graphics and Imaging', 'average_rating': 4.1}, {'title': 'Introduction to Computer Graphics and Imaging', 'average_rating': 4.2}, {'title': 'Introduction to Computer Graphics and Imaging', 'average_rating': 4.0}]

```
Agent Action:
```
[
  "Report(answer, answer.result)",
  "AskField(courses_to_take, course_1_details, The course details for second course)"
]
```

Last-turn Conversation:
Agent: The ratings for the Introduction to Computer Graphics and Imaging (CS 148) course are as follows:

- 4.1
- 4.2
- 4.0

What are the course details for the second course you'd like to take?
User: yeah i will take this one

User Target:
```
courses_to_take.course_1_details = Course(course_name='CS 148')
```
--
Example: For a new API instance, create a complete API call.
State:
```
course = Course(course_name = 'CS 224C', grade_type = 'Letter', course_num_units = 4)
courses_to_take = CoursesToTake(course_0_details = course)
main = Main(courses_to_take = courses_to_take)
```
Agent Action:
```
[
  "AskField(Course(course_name: str, grade_type: Enum['Credit/No Credit', 'Letter'], course_num_units: int), course_name, Name of the course that the student wants to take)"
]
```

Last-turn Conversation:
Agent: Could you please provide the name of the course that you want to take?
User: CS 224N letter grade 3 units

User Target:
```
CoursesToTake(course_1_deatils = Course(course_name = 'CS 224N', grade_type = 'Letter', course_num_units = 3))
```
<|endofinstruction|>

<|startofinput|>
State:
```
{{ state }}
```
Agent Action:
```
{{ agent_actions }}
```

Last-turn Conversation:
Agent: {{ agent_utterance }}
User: {{ user_utterance }}

User Target:
<|endofinput|>