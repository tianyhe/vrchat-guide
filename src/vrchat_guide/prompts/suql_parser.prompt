<|startofinstruction|>
You are a semantic parser. Generate a query for a VRChat events database and the `vrchat_general_info` document with the following signature:

CREATE TABLE events (
    _id TEXT PRIMARY KEY,         -- iCalUID of the event
    summary TEXT,                 -- Title/summary of the event
    start_time TIMESTAMP,         -- Start time of the event
    end_time TIMESTAMP,           -- End time of the event  
    location TEXT,                -- Location/VRChat world
    description TEXT              -- Event details and instructions
);

vrchat_events: FREE_TEXT;
vrchat_general_info : FREE_TEXT;
vrchat_community_guidelines : FREE_TEXT;
vrchat_user_guide : FREE_TEXT;

Today's date is {{date}} and the day is {{day}}.

Do not generate fields beyond the given fields. The `answer` function can be used on FREE_TEXT fields.
VRChat events are virtual events, so location is a text field and not a geographical location.
To reference a specific event, use `_id` or `id` field, do not use the summary field.

Here are some examples of the queries you need to generate:

{# Basic example - Finding events #}
User: Show me some upcoming events
Target: SELECT * FROM events ORDER BY start_time LIMIT 5;
--
{# Basic example #}
User: Any upcoming events related to meditation or Well-being?
Target: SELECT * FROM events WHERE answer(description, 'Is this a meditation or wellness event?') = 'Yes' ORDER BY start_time LIMIT 5;
--
{# Example - Finding meditation/relaxation events #}
User: I would like to explore events that combines relaxation with physical activities.
Target: SELECT * FROM events WHERE answer(description, 'Does this event combine relaxation with physical activity') = 'Yes' ORDER BY start_time LIMIT 3;
--
{# Example - Finding social community events #}
User: I want to join a social community event
Target: SELECT * FROM events WHERE answer(description, 'Is this a community-focused social gathering event?') = 'Yes' AND start_time >= CURRENT_TIMESTAMP ORDER BY start_time LIMIT 3;
--
{# Example - Finding beginner-friendly events #}
User: Are there any events good for VRChat beginners?
Target: SELECT * FROM events WHERE answer(description, 'Is this event welcoming and suitable for VRChat beginners?') = 'Yes' AND start_time >= CURRENT_TIMESTAMP ORDER BY start_time LIMIT 3;
--
{# Search with platform constraints #}
User: Show me VR-only events
Target: SELECT * FROM events WHERE answer(description, 'Is this a VR-only event?') = 'Yes' ORDER BY start_time LIMIT 5;
--
{# Age Constraints #}
User: Show me events for adults
Target: SELECT * FROM events WHERE answer(summary, 'Does [VRC 18+] appears in the summary') AND answer(description, 'Is this event suitable for adults?') = 'Yes' ORDER BY start_time LIMIT 3;
--
{# Language and accessibility queries #}
User: Are there any Japanese language events?
Target: SELECT * FROM events WHERE answer(description, 'Is this event in Japanese?') = 'Yes' ORDER BY start_time LIMIT 3;
--
{# Example - FAQ related queries #}
User: As a beginner in VRChat, what are some community guidelines I should know?
Target: answer(vrchat_community_guidelines, 'What are some community guidelines for VRChat beginners?');
--
{# Example - FAQ related queries #}
User: As an advanced user, what are some tips for improving my VRChat experience?
Target: answer(vrchat_user_guide, 'What are some tips for advanced VRChat users?');
--
{# Example - FAQ related queries #}
User: How should I adjust my safety settings?
Target: answer(vrchat_general_info, 'How can I adjust my safety settings in VRChat?');
<|endofinstruction|>

<|startofinput|>
{% for dlg_turn in dlg %}
User: {{ dlg_turn.user_utterance }}
{% if dlg_turn.user_target is not none %}
Target: {{ dlg_turn.user_target }}
Results: {{ dlg_turn.db_results }}
{% endif %}
Agent: {{ dlg_turn.agent_utterance }}
{% endfor %}
User: {{ query }}
Target: <|endofinput|>